import { vtkOffscreenMultiRenderWindow } from './vtkClasses';
class WebGLContextPool {
    constructor(count) {
        this.contexts = [];
        this.offScreenCanvasContainers = [];
        this.viewportToContext = new Map();
        for (let i = 0; i < count; i++) {
            const offscreenMultiRenderWindow = vtkOffscreenMultiRenderWindow.newInstance();
            const container = document.createElement('div');
            offscreenMultiRenderWindow.setContainer(container);
            this.contexts.push(offscreenMultiRenderWindow);
            this.offScreenCanvasContainers.push(container);
        }
    }
    getContextByIndex(index) {
        if (index >= 0 && index < this.contexts.length) {
            return {
                context: this.contexts[index],
                container: this.offScreenCanvasContainers[index],
            };
        }
        return null;
    }
    assignViewportToContext(viewportId, contextIndex) {
        this.viewportToContext.set(viewportId, contextIndex);
    }
    getContextIndexForViewport(viewportId) {
        return this.viewportToContext.get(viewportId);
    }
    getAllContexts() {
        return this.contexts;
    }
    getContextCount() {
        return this.contexts.length;
    }
    destroy() {
        this.contexts.forEach((context) => {
            context.delete();
        });
        this.contexts = [];
        this.offScreenCanvasContainers = [];
        this.viewportToContext.clear();
    }
}
export default WebGLContextPool;
